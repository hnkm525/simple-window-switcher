{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","localVideo","startButton","document","getElementById","console","log","localStream","playVideo","element","stream","a","srcObject","play","error","onClickStart","option","video","frameRate","audio","navigator","mediaDevices","getDisplayMedia","then","res","cleanupVideoElement","pause","stopStream","getTracks","forEach","track","stop","useEffect","disabled","className","id","onClick","autoPlay","muted","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0QA8EeA,MA3Ef,WAEE,IAGIC,EAHEC,EAAmBC,SAASC,eAAe,eACjDC,QAAQC,IAAIJ,GAGOC,SAASC,eAAe,eAA3C,IACIG,EAAmB,KAGjBC,EAAS,uCAAG,WAAOC,EAAcC,GAArB,SAAAC,EAAA,6DAChBN,QAAQC,IAAI,UAAWG,GACvBJ,QAAQC,IAAI,SAAUI,GAGtBD,EAAQG,UAAYF,EALJ,kBAORD,EAAQI,OAPA,uDAUdR,QAAQS,MAAR,MAVc,iEAAH,wDAcTC,EAAY,uCAAG,4BAAAJ,EAAA,6DACbK,EAAS,CAAEC,MAAO,CAAEC,UAAW,IAAMC,OAAO,GAD/B,kBAGXC,UAAUC,aAAaC,gBAAgBN,GAC5CO,MAAK,SAACC,GACLhB,EAAUP,EAAYuB,GACtBjB,EAAciB,KANC,OAQjBnB,QAAQC,IAAI,sDARK,gDAUjBD,QAAQS,MAAM,uCAAd,MAViB,yDAAH,qDAsBZW,EAAsB,SAAChB,GAC3BA,EAAQiB,QACRjB,EAAQG,UAAY,MAGhBe,EAAa,SAACjB,GAClBA,EAAOkB,YAAYC,SAAQ,SAACC,GAAD,OAAgBA,EAAMC,WAUnD,OAPAC,qBAAU,WACR,IAAM9B,EAAmBC,SAASC,eAAe,eACjDC,QAAQC,IAAIJ,GACZA,EAAY+B,UAAW,EACvBhC,EAAaE,SAASC,eAAe,WACpC,IAGD,qBAAK8B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKC,GAAG,YAAR,UACE,wBAAQA,GAAG,cAAcC,QAASrB,EAAlC,mBACA,wBAAQoB,GAAG,cAAcC,QA7Bb,SAAC1B,GACnBe,EAAoBxB,GAChBM,IACFoB,EAAWpB,GACXA,EAAc,OAyBV,qBAEF,uBAAO2B,UAAU,QAAQC,GAAG,QAAQE,UAAQ,EAACC,OAAO,UC1D7CC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9C,SAASC,eAAe,SAM1BmC,M","file":"static/js/main.9684d419.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect } from \"react\"\n\nfunction App() {\n\n  const startButton: any = document.getElementById(\"startButton\");\n  console.log(startButton);\n\n  let localVideo: any;\n  const audioCheck = document.getElementById('audio_check');\n  let localStream: any = null;\n\n\n  const playVideo = async (element: any, stream: any) => {\n    console.log(\"element\", element);\n    console.log(\"stream\", stream);\n    \n\n    element.srcObject = stream;\n    try {\n      await element.play();\n    }\n    catch (err) {\n      console.error(err)\n    };\n  }\n\n  const onClickStart = async () => {\n    const option = { video: { frameRate: 60 }, audio: true };\n    try {\n      await navigator.mediaDevices.getDisplayMedia(option)\n      .then((res)=>{\n        playVideo(localVideo, res);\n        localStream = res;\n      });\n      console.log('mediaDevice.getDisplayMediaã€€Screen Capture OK');\n    } catch (err) {\n      console.error('mediaDevice.getDisplayMedia() error:', err);\n    }\n  }\n\n  const onClickStop = (stream:any) => {\n    cleanupVideoElement(localVideo);\n    if (localStream) {\n      stopStream(localStream);\n      localStream = null;\n    }\n  }\n\n  const cleanupVideoElement = (element:any) => {\n    element.pause();\n    element.srcObject = null;\n  }\n\n  const stopStream = (stream: any) => {\n    stream.getTracks().forEach((track: any) => track.stop());\n  }\n\n  useEffect(() => {\n    const startButton: any = document.getElementById(\"startButton\");\n    console.log(startButton);\n    startButton.disabled = false;\n    localVideo = document.getElementById('video');\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"container\">\n          <button id=\"startButton\" onClick={onClickStart}>Start</button>\n          <button id=\"startButton\" onClick={onClickStop}>Stop</button>\n        </div>\n        <video className=\"video\" id=\"video\" autoPlay muted={true}></video>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}